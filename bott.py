from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

TOKEN = "8337826639:AAHD-mDNgGanhZeV79BQ--6_Su2Sc6u557M"

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üëã –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–æ–Ω–∏–∫–∞.\n\nüé• –ó–¥–µ—Å—å —è –ø—Ä–æ–¥–∞—é –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É.\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ üëá"
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–∏–≤–∞—Ç", callback_data="type_private"), InlineKeyboardButton("–ü—Ä–∏–≤–∞—Ç +", callback_data="type_private_plus")]
    ]
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–∏–≤–∞—Ç
async def choose_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "type_private":
        text = (
            "üíº *–ü—Ä–∏–≤–∞—Ç*\n"
            "‚Äì –î–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ä—ã–º –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–∏–¥—ã–≤–∞—é—Ç—Å—è –∏–∑ –ü—Ä–∏–≤–∞—Ç +\n\n"
            "–í—ã–±–µ—Ä–∏ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Ü–µ–Ω—É:"
        )
        keyboard = [
            [InlineKeyboardButton("1 –º–µ—Å—è—Ü ‚Äì 1500 ‚ÇΩ", callback_data="buy_private_1m")],
            [InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ ‚Äì 2500 ‚ÇΩ", callback_data="buy_private_6m")],
            [InlineKeyboardButton("1 –≥–æ–¥ ‚Äì 4000 ‚ÇΩ", callback_data="buy_private_1y")],
            [InlineKeyboardButton("–ù–∞–≤—Å–µ–≥–¥–∞ ‚Äì 6000 ‚ÇΩ", callback_data="buy_private_forever")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
    else:  # type_private_plus
        text = (
            "üíé *–ü—Ä–∏–≤–∞—Ç +*\n"
            "‚Äì –í—Å–µ –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ, —Å–Ω—è—Ç—ã–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ–ø–æ–ª–Ω—è–µ–º—ã–µ\n\n"
            "–í—ã–±–µ—Ä–∏ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Ü–µ–Ω—É:"
        )
        keyboard = [
            [InlineKeyboardButton("1 –º–µ—Å—è—Ü ‚Äì 2500 ‚ÇΩ", callback_data="buy_private_plus_1m")],
            [InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ ‚Äì 3500 ‚ÇΩ", callback_data="buy_private_plus_6m")],
            [InlineKeyboardButton("1 –≥–æ–¥ ‚Äì 6000 ‚ÇΩ", callback_data="buy_private_plus_1y")],
            [InlineKeyboardButton("–ù–∞–≤—Å–µ–≥–¥–∞ ‚Äì 8000 ‚ÇΩ", callback_data="buy_private_plus_forever")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤
async def buy_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    plans = {
        "buy_private_1m": ("–ü—Ä–∏–≤–∞—Ç –Ω–∞ 1 –º–µ—Å—è—Ü", "1500 ‚ÇΩ"),
        "buy_private_6m": ("–ü—Ä–∏–≤–∞—Ç –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤", "2500 ‚ÇΩ"),
        "buy_private_1y": ("–ü—Ä–∏–≤–∞—Ç –Ω–∞ 1 –≥–æ–¥", "4000 ‚ÇΩ"),
        "buy_private_forever": ("–ü—Ä–∏–≤–∞—Ç –Ω–∞–≤—Å–µ–≥–¥–∞", "6000 ‚ÇΩ"),
        "buy_private_plus_1m": ("–ü—Ä–∏–≤–∞—Ç + –Ω–∞ 1 –º–µ—Å—è—Ü", "2500 ‚ÇΩ"),
        "buy_private_plus_6m": ("–ü—Ä–∏–≤–∞—Ç + –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤", "3500 ‚ÇΩ"),
        "buy_private_plus_1y": ("–ü—Ä–∏–≤–∞—Ç + –Ω–∞ 1 –≥–æ–¥", "6000 ‚ÇΩ"),
           await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    text = (
        f"üí≥ –í—ã –≤—ã–±—Ä–∞–ª–∏: *{plan_name}*\n"
        f"üí∞ –¶–µ–Ω–∞: *{price}*\n\n"
        "–ù–æ–º–µ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
        "üì≤ `2202208324636159`\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —á–µ–∫ (—Ñ–æ—Ç–æ –∏–ª–∏ PDF).\n\n"
        "üìÑ *–§–æ—Ä–º–∞—Ç —á–µ–∫–∞*: PNG, JPG, PDF"
    )
    keyboard = [[InlineKeyboardButton("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —á–µ–∫", callback_data="attach_receipt")]]

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –æ–Ω —Å–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ–∫ (–Ω–∞ —Å–ª—É—á–∞–π –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏)
    context.user_data["awaiting_receipt"] = True
    context.user_data["selected_plan"] = plan_name

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —á–µ–∫–∞ (–≤ –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º)
async def attach_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —á–µ–∫–æ–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

    context.user_data["receipt_requested"] = True

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å —á–µ–∫–æ–º
async def receive_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("receipt_requested"):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —á–µ–∫ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—à—ë–ª –Ω—É–∂–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç —Å –Ω—É–∂–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
    if update.message.photo or (update.message.document and update.message.document.mime_type in ["application/pdf", "image/png", "image/jpeg"]):
        plan = context.user_data.get("selected_plan", "–≤–∞—à –ø–ª–∞–Ω")
        await update.message.reply_text(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É *{plan}*! \n\n"
            "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Ö–æ–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n\n"
            "–ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ.",
            parse_mode="Markdown"
        )
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        context.user_data.clear()
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG, JPG –∏–ª–∏ PDF."
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
async def back_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await start(update, context)

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(choose_type, pattern="^(type_private|type_private_plus)$"))
    app.add_handler(CallbackQueryHandler(buy_plan, pattern="^buy_"))
    app.add_handler(CallbackQueryHandler(attach_receipt, pattern="attach_receipt"))
    app.add_handler(CallbackQueryHandler(back_to_start, pattern="back_to_start"))
    app.add_handler(MessageHandler(filters.Document.ALL | filters.PHOTO & filters.TEXT & (~filters.COMMAND), receive_receipt))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()     "buy_private_plus_forever": ("–ü—Ä–∏–≤–∞—Ç + –Ω–∞–≤—Å–µ–≥–¥–∞", "8000 ‚ÇΩ"),
    }

    plan_name, price = plans.get(query.data, (None, None))
    if not plan_name:
